convert.data = function(data){
# Ordering index:
index = order(data$time)
#re-arrange data and rank
dat = dat[index, ]
dat$rank = 1:nrow(dat)
# Construct new dataset:
ids = rep(1:nrow(dat), times = dat$rank)
times = unlist(sapply(1:nrow(dat), function(x) {
dat$time[1:x]
}))
y = as.numeric(rep(dat$event, times = dat$rank))
temp = data.frame(ids,times,y)
# Which patients had events:
which.event = dat$rank[dat$event==T]
# Convert outcome column
for(i in 1:length(unique(ids))) {
y.vals = temp[ids == i, "y"]
is.event = (y.vals[i] == 1)
if (is.event){
temp[ids == i, "y"] = 0
temp[ids == i, "y"][i] = 1
} else {
next()
}
}
return(temp)
}
survbart = function(data, parallel = F, num.split = NULL, seed = NULL) {
if (parallel == T){
if (is.null(num.split)){
stop('Need to define num.split')
}
# Split unique times into num.splits groups:
unique.times = unique(data$times)
where.split = seq(1, length(unique.times), by = round(length(unique.times)/num.split))
where.split = append(where.split, length(unique.times))
split = lapply(1:num.split, function(s) {
if (s == num.split){
vals = unique.times[where.split[s]:(where.split[s+1])]
} else {
vals = unique.times[where.split[s]:(where.split[s+1]-1)]
}
vals
})
split.dat = lapply(1:num.split, function(s) {
data[data$times %in% split[[s]], ]
})
post.draws = foreach(s = 1:num.split, .packages = c("BART")) %dopar% {
set.seed(seed)
temp = split.dat[[s]]
x.test = unique(temp$times)
fit = pbart(y.train = temp$y, x.train = temp$times, x.test = x.test)
post.draws = fit$yhat.test
colnames(post.draws) = as.character(x.test)
post.draws
}
post = do.call(cbind, post.draws)
return(post)
} else {
x.test = unique(data$times)
fit = invisible(pbart(y.train = data$y, x.train = data$times, x.test = x.test,
printevery = 10000))
post.draws = fit$yhat.test
colnames(post.draws) = as.character(x.test)
return(post.draws)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(survbart)
Data = surv.sim
Data = surv.sim()
Data = surv.sim(censoring.rate = 0.5)
Data = surv.sim(n = 100, censoring.rate = 0.5)
min(Data$time)
max(Data$time)
TestX = seq(from = min(Data$time), to = max(Data$time), by = 0.5)
surv.bart(times = Data$time, delta = Data$event, x.test = TestX)
?surv.bart
BART::surv.bart(times = Data$time, delta = Data$event, x.test = TestX)
PostDraws = BART::surv.bart(times = Data$time, delta = Data$event, x.test = TestX)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(survbart)
# Read in data from survival package:
Data = lung
# Missing value for ph.karno:
group = -which(is.na(lung[,7]))
# Extract times and censoring indicator:
times = lung[group, 'time']
delta = lung[group, 'status']-1 # 0 = censored, 1 = event
summary(times)
table(delta)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(BART)
Data = surv.sim(n = 100, censoring.rate = 0.5)
PostDraws = readRDS('PostDRAWS')
# PostDraws = readRDS('PostDRAWS')
TestX[c(17,23),]
# Read in data from survival package:
Data = lung
# Missing value for ph.karno:
group = -which(is.na(lung[,7]))
# Extract times and censoring indicator:
times = lung[group, 'time']
delta = lung[group, 'status']-1 # 0 = censored, 1 = event
summary(times)
table(delta)
# Covariates of interest:
Covars = c('age', 'sex', 'ph.karno')
TrainX = as.matrix(Data[group, Covars])
# Summary Statistics:
summary(TrainX[,1])
table(TrainX[,2])
table(TrainX[,3])
# Tested covariate scenarios:
TestX = matrix(nrow = 84, ncol = 3)
i = 1
for(age in 5*(9:15)) for(sex in 1:2) for(ph.karno in 10*(5:10)) {
TestX[i, ] = c(age, sex, ph.karno)
i = i + 1
}
head(TestX)
# PostDraws = readRDS('PostDRAWS')
TestX[c(17,23),]
PostDraws$K
16*PostDraws$K
1:PostDraws$K
LowRiskMales = 16*PostDraws$K + 1:PostDraws$K
LowRiskFemales = 22*PostDraws$K + 1:PostDraws$K
PostDraws$times
PostDraws$surv.test.mean
PostDraws$surv.test.mean[LowRiskMales]
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type=’s’, col=’blue’,
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
points(PostDraws$times, PostDraws$surv.test.mean[LowRiskFemales], type='s', col='red')
PostDraws$surv.test
PostDraws$surv.test[ 1 , LowRiskFemales]
PostDraws$surv.test[2 , LowRiskFemales]
apply(PostDraws$surv.test[2 , LowRiskFemales], 2, quantile, probs=c(0.025, 0.975))
apply(PostDraws$surv.test[ , LowRiskFemales], 2, quantile, probs=c(0.025, 0.975))
Credible95 = apply(PostDraws$surv.test[ , LowRiskFemales], 2, quantile, probs=c(0.025, 0.975))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
Credible95 = apply(PostDraws$surv.test[ , LowRiskMales], 2, quantile, probs=c(0.025, 0.975))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
Credible95 = apply(PostDraws$surv.test[ , LowRiskMales], 2, quantile, probs=c(0.025, 0.975))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
points(PostDraws$times, Credible95[1, ], type='s')
points(PostDraws$times, Credible95[2, ], type='s')
surv.bart
mc.surv.bart()
mc.surv.bart
TrainY = NULL
length(TrainY) == 0
surv.pre.bart(times, delta, TrainX, TestX)
surv = surv.pre.bart(times, delta, TrainX, TestX)
TrainY = surv$y.train
TrainX = surv$X.train
TestX = surv$X.test
library(BART)
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = (t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = (t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
# Illustration ----
Data = SimulateData(n = 100, censoring.rate = 0.50)
head(Data)
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = as.numeric(t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
# Illustration ----
set.seed(807)
Data = SimulateData(n = 100, censoring.rate = 0.50)
head(Data)
qweibull(shape = 0.8, scale = 2.5)
# Times we want to evaluate at
TestY = qweibull(p = c(0.1), shape = 0.8, scale = 2.5)
TestY
# Times we want to evaluate at
TestY = qweibull(p = c(0.1, 0.25, 0.5, 0.75, 0.9), shape = 0.8, scale = 2.5)
# Times we want to evaluate at
TestY = qweibull(p = c(0.1, 0.25, 0.5, 0.75, 0.9), shape = 0.8, scale = 2.5)
PostDraws = surv.bart(x.train = c(0,0,0), times = Data$time, delta = Data$event, y.test = TestY)
# Times we want to evaluate at
TestX = qweibull(p = c(0.1, 0.25, 0.5, 0.75, 0.9), shape = 0.8, scale = 2.5)
PostDraws = surv.bart(times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = NULL, times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = rep(1, 100), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = as.matrix(rep(1, 100)), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = matrix(1, nrow = 100, ncol = 1), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = matrix(1, nrow = 1, ncol = 100), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = NULL, times = Data$time, delta = Data$event, x.test = TestY)
library(devtools)
install_github('SurvBART', 'nillen/')
install_github('SurvBART', 'nillen')
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = as.numeric(t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
install_github('SurvBART', 'nillen')
install_github('SurvBART', 'nillen0')
install_github('SurvBART', 'nillen0/')
install_github("nillen0/SurvBART")
Sys.setenv("TAR" = "internal")
install_github("nillen0/SurvBART")
library(SurvBART)
install_github("nillen0/SurvBART")
Sys.setenv("TAR" = "internal")
Sys.setenv("TAR")
install_github("nillen0/SurvBART")
library(SurvBART)
library(SurvBART)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
set.seed(807)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
library(SurvBART)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
set.seed(123)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
set.seed(123)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = F)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = F)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = F, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95
PosteriorDraws = PostDraws$surv;
Times = Data$time;
Event = Data$event;
Predictors = 1;
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9);
ConfLevel = 0.95
UniqueTimes = sort(unique(Times))
# Estimate quantiles, BART:
BARTEst = QuantEst(PosteriorDraws = PosteriorDraws,
Times = UniqueTimes,
Quantiles = Quantiles,
CredLevel = ConfLevel)
# Estimate Quantiles, KM:
KMEst = KMQuant(Times = Times, Event = Event,
Predictors = Predictors,
Quantiles = Quantiles,
ConfLevel = ConfLevel)
# Estimate Quantiles, Weibull:
WeibEst = WeibQuant(Times = Times, Event = Event,
Predictors = Predictors,
Quantiles = Quantiles,
ConfLevel = ConfLevel)
# Obtain credible interval:
CredInt = CredibleInt(PosteriorDraws = PosteriorDraws,
CredLevel = CredLevel)
CredLevel = 0.95
# Obtain credible interval:
CredInt = CredibleInt(PosteriorDraws = PosteriorDraws,
CredLevel = CredLevel)
Times = UniqueTimes
PosteriorDraws
PosteriorDraws = PostDraws$surv;
PostDraws$surv
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = F, NumCores = 2)
library(SurvBART)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = F, NumCores = 2)
PostDraws$surv
install_github("nillen0/SurvBART")
library(devtools)
install_github("nillen0/SurvBART")
library(SurvBART)
temp = BART::surv.bart(times = Times, delta = Event)
Times = Data$time
Event = Data$event
temp = BART::surv.bart(times = Times, delta = Event)
temp$surv.test
document()
setwd("~/Dropbox/Upenn/Classes/Spring 2019/BSTA670_Computing/BARTProject/SurvivalBart/SurvBART")
document()
install_github("nillen0/SurvBART")
library(SurvBART)
set.seed(807)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = F, NumCores = 2)
PostDraws$surv
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = F)
set.seed(807)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = F)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = F)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = F)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
document()
check()
document()
check()
check()
install_github("nillen0/SurvBART")
library(SurvBART)
set.seed(807)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
mc.surv.bart
imulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
SimulateData(n = 50, censoring.rate = 0.5)
document()
check()
install_github("nillen0/SurvBART")
lapply(1:2, function(i) {
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
lapply(1:3, function(i) {
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
sapply(1:3, function(i) {
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Res = lapply(1:3, function(i) {
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
lapply(Res, function(l) l$EstimateMat)
EstimateResults = lapply(Res, function(l) l$EstimateMat)
do.call(sum, EstimateResults)
EstimateResults[[1]] + EstimateResults[[2]]
EstimateResults[[1]] + EstimateResults[[2]] + EstimateResults[[3]]
(EstimateResults[[1]] + EstimateResults[[2]] + EstimateResults[[3]])/3
?Reduce
Reduce("+", EstimateResults)
Reduce("+", EstimateResults)/3
knitr::opts_chunk$set(echo = TRUE)
library(microbenchmark)
library(SurvBART)
BenchRes = microbenchmark(Simulation(n = 50, CensoringRate = 0.2, Parallel = T),
Simulation(n = 50, CensoringRate = 0.2, Parallel = F), times = 5)
BenchRes = microbenchmark(Simulation(n = 50, CensoringRate = 0.2, Parallel = T, seed = 807),
Simulation(n = 50, CensoringRate = 0.2, Parallel = F, seed = 807), times = 5)
BenchRes
Res50.2 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
library(doParallel)
check()
?makeCluster
check()
check()
document()
check()
document()
check()
document()
Res50.2 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
install_github("nillen0/SurvBART")
library(SurvBART)
Res50.2 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Res50.5 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.5, Parallel = T, seed = 807 + i)
})
Res100.2 = lapply(1:400, function(i) {
Simulation(n = 100, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Res100.5 = lapply(1:400, function(i) {
Simulation(n = 100, CensoringRate = 0.5, Parallel = T, seed = 807 + i)
})
Res200.2 = lapply(1:400, function(i) {
Simulation(n = 200, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Res200.5 = lapply(1:400, function(i) {
Simulation(n = 200, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Res50.2 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Res50.2 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Res50.5 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.5, Parallel = T, seed = 807 + i)
})
library(SurvBART)
Res50.2 = lapply(1:400, function(i) {
Simulation(n = 50, CensoringRate = 0.2, Parallel = T, seed = 807 + i)
})
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
library(SurvBART)
install_github("nillen0/SurvBART")
library(SurvBART)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
