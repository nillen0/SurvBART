post.draws = fit$yhat.test
colnames(post.draws) = as.character(x.test)
return(post.draws)
}
}
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(survbart)
Data = surv.sim
Data = surv.sim()
Data = surv.sim(censoring.rate = 0.5)
Data = surv.sim(n = 100, censoring.rate = 0.5)
min(Data$time)
max(Data$time)
TestX = seq(from = min(Data$time), to = max(Data$time), by = 0.5)
surv.bart(times = Data$time, delta = Data$event, x.test = TestX)
?surv.bart
BART::surv.bart(times = Data$time, delta = Data$event, x.test = TestX)
PostDraws = BART::surv.bart(times = Data$time, delta = Data$event, x.test = TestX)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(survbart)
# Read in data from survival package:
Data = lung
# Missing value for ph.karno:
group = -which(is.na(lung[,7]))
# Extract times and censoring indicator:
times = lung[group, 'time']
delta = lung[group, 'status']-1 # 0 = censored, 1 = event
summary(times)
table(delta)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(BART)
Data = surv.sim(n = 100, censoring.rate = 0.5)
PostDraws = readRDS('PostDRAWS')
# PostDraws = readRDS('PostDRAWS')
TestX[c(17,23),]
# Read in data from survival package:
Data = lung
# Missing value for ph.karno:
group = -which(is.na(lung[,7]))
# Extract times and censoring indicator:
times = lung[group, 'time']
delta = lung[group, 'status']-1 # 0 = censored, 1 = event
summary(times)
table(delta)
# Covariates of interest:
Covars = c('age', 'sex', 'ph.karno')
TrainX = as.matrix(Data[group, Covars])
# Summary Statistics:
summary(TrainX[,1])
table(TrainX[,2])
table(TrainX[,3])
# Tested covariate scenarios:
TestX = matrix(nrow = 84, ncol = 3)
i = 1
for(age in 5*(9:15)) for(sex in 1:2) for(ph.karno in 10*(5:10)) {
TestX[i, ] = c(age, sex, ph.karno)
i = i + 1
}
head(TestX)
# PostDraws = readRDS('PostDRAWS')
TestX[c(17,23),]
PostDraws$K
16*PostDraws$K
1:PostDraws$K
LowRiskMales = 16*PostDraws$K + 1:PostDraws$K
LowRiskFemales = 22*PostDraws$K + 1:PostDraws$K
PostDraws$times
PostDraws$surv.test.mean
PostDraws$surv.test.mean[LowRiskMales]
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type=’s’, col=’blue’,
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
points(PostDraws$times, PostDraws$surv.test.mean[LowRiskFemales], type='s', col='red')
PostDraws$surv.test
PostDraws$surv.test[ 1 , LowRiskFemales]
PostDraws$surv.test[2 , LowRiskFemales]
apply(PostDraws$surv.test[2 , LowRiskFemales], 2, quantile, probs=c(0.025, 0.975))
apply(PostDraws$surv.test[ , LowRiskFemales], 2, quantile, probs=c(0.025, 0.975))
Credible95 = apply(PostDraws$surv.test[ , LowRiskFemales], 2, quantile, probs=c(0.025, 0.975))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
Credible95 = apply(PostDraws$surv.test[ , LowRiskMales], 2, quantile, probs=c(0.025, 0.975))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
Credible95 = apply(PostDraws$surv.test[ , LowRiskMales], 2, quantile, probs=c(0.025, 0.975))
plot(PostDraws$times, PostDraws$surv.test.mean[LowRiskMales], type='s', col='blue',
main='Age 50 with KPS=90',
xlab='t', ylab='S(t)', ylim=c(0, 1))
points(PostDraws$times, Credible95[1, ], type='s')
points(PostDraws$times, Credible95[2, ], type='s')
surv.bart
mc.surv.bart()
mc.surv.bart
TrainY = NULL
length(TrainY) == 0
surv.pre.bart(times, delta, TrainX, TestX)
surv = surv.pre.bart(times, delta, TrainX, TestX)
TrainY = surv$y.train
TrainX = surv$X.train
TestX = surv$X.test
library(BART)
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = (t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = (t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
# Illustration ----
Data = SimulateData(n = 100, censoring.rate = 0.50)
head(Data)
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = as.numeric(t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
# Illustration ----
set.seed(807)
Data = SimulateData(n = 100, censoring.rate = 0.50)
head(Data)
qweibull(shape = 0.8, scale = 2.5)
# Times we want to evaluate at
TestY = qweibull(p = c(0.1), shape = 0.8, scale = 2.5)
TestY
# Times we want to evaluate at
TestY = qweibull(p = c(0.1, 0.25, 0.5, 0.75, 0.9), shape = 0.8, scale = 2.5)
# Times we want to evaluate at
TestY = qweibull(p = c(0.1, 0.25, 0.5, 0.75, 0.9), shape = 0.8, scale = 2.5)
PostDraws = surv.bart(x.train = c(0,0,0), times = Data$time, delta = Data$event, y.test = TestY)
# Times we want to evaluate at
TestX = qweibull(p = c(0.1, 0.25, 0.5, 0.75, 0.9), shape = 0.8, scale = 2.5)
PostDraws = surv.bart(times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = NULL, times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = rep(1, 100), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = as.matrix(rep(1, 100)), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = matrix(1, nrow = 100, ncol = 1), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = matrix(1, nrow = 1, ncol = 100), times = Data$time, delta = Data$event, x.test = TestY)
PostDraws = surv.bart(x.train = NULL, times = Data$time, delta = Data$event, x.test = TestY)
library(devtools)
install_github('SurvBART', 'nillen/')
install_github('SurvBART', 'nillen')
# Required Functions ----
SimulateData = function(n, censoring.rate) {
if (!censoring.rate %in% c(0.20, 0.50)) {
stop("Censoring rate either 0.2, or 0.5")
}
rate = ifelse(censoring.rate == 0.2, 0.094, 0.430)
x = rweibull(n, shape = 0.8, scale = 2.5)
c = rexp(n, rate = rate)
t = pmin(x,c)
delta = as.numeric(t==x)
dat = data.frame("time" = t, "event" = delta)
return(dat)
}
install_github('SurvBART', 'nillen')
install_github('SurvBART', 'nillen0')
install_github('SurvBART', 'nillen0/')
install_github("nillen0/SurvBART")
Sys.setenv("TAR" = "internal")
install_github("nillen0/SurvBART")
library(SurvBART)
install_github("nillen0/SurvBART")
Sys.setenv("TAR" = "internal")
Sys.setenv("TAR")
install_github("nillen0/SurvBART")
library(BART)
library(SurvBART)
install_github("nillen0/SurvBART")
library(devtools)
library(roxygen2)
install_github("nillen0/SurvBART")
# Read in the data:
set.seed(807)
Data = SimulateData(n = 200, censoring.rate = 0.5, TwoSample = F)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 4)
library(BART)
library(SurvBART)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 100, censoring.rate = 0.5, TwoSample = F)
library(BART)
library(SurvBART)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 100, censoring.rate = 0.5, TwoSample = F)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 4)
library(BART)
library(SurvBART)
install_github("nillen0/SurvBART")
# Read in the data:
set.seed(807)
install_github("nillen0/SurvBART")
library(SurvBART)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 100, censoring.rate = 0.5, TwoSample = F)
Data = SimulateData(n = 100, censoring.rate = 0.5, TwoSample = T)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 4)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 100, censoring.rate = 0.5, TwoSample = T)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 4)
# Obtain Posterior Draws:
t = Sys.time()
Sys.time - t
Sys.time() - t
t = Sys.time()
PostDraws = ObtainPost(TrainX = Data$z,
Times = Data$time,
Event = Data$event,
TestX = c(0, 1),
parallel = T, NumCores = 4)
Sys.time() - t
45 * 400
18000/60
300/60
Data = SimulateData(n = 200, censoring.rate = 0.5, TwoSample = T)
t = Sys.time()
PostDraws = ObtainPost(TrainX = Data$z,
Times = Data$time,
Event = Data$event,
TestX = c(0, 1),
parallel = T, NumCores = 4)
Sys.time() - t
3.5*400
2800/60
# Read in the data:
set.seed(807)
Data = SimulateData(n = 50, censoring.rate = 0.5, TwoSample = F)
t = Sys.time()
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
Sys.time() - t
12*800
9600/60
160/60
PostDraws
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
Quants
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
setwd("~/Dropbox/Upenn/Classes/Spring 2019/BSTA670_Computing/BARTProject/SurvivalBart/SurvBART/R")
setwd("..")
document()
document()
document()
install_github("nillen0/SurvBART")
library(SurvBART)
library(SurvBART)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2)
install_github("nillen0/SurvBART")
library(SurvBART)
library(SurvBART)
document()
check()
install_github("nillen0/SurvBART")
library(SurvBART)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2)
X
X$surv.test
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
library(SurvBART)
library(microbenchmark)
install.packages("microbenchmark")
library(microbenchmark)
?microbenchmark
BenchRes = microbenchmark(Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T),
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T), times = 5)
BenchRes = microbenchmark(Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T),
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = F), times = 5)
set.seed(807)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Quants
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
survreg(Surv(Data$time, Data$event) ~ 1, dist = "weibull")
fit = survreg(Surv(Data$time, Data$event) ~ 1, dist = "weibull")
?survreg
predict(fit, type = "quantile", p = 0.5)
?predict.survreg
diff = 1-0.95
diff/2
1 - diff/2
qnorm(cut, mean = 0, sd = 1)
qnorm(0.975, mean = 0, sd = 1)
install.packages('ciTools')
library(ciTools)
add_quantile(fit = fit, p = 0.5)
add_quantile(tb = data.frame(1), fit = fit, p = 0.5)
add_quantile(tb = data.frame(1), fit = fit, p = c(0.1, 0.5))
add_quantile(tb = data.frame(1), fit = fit, p = 0.1)
Quants
set.seed(807)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 50, censoring.rate = 0.5)
head(Data)
Data = SimulateData(n = 50, censoring.rate = 0.5)
head(Data)
# Read in the data:
set.seed(807)
Data = SimulateData(n = 50, censoring.rate = 0.5)
# Obtain Posterior Draws:
PostDraws = ObtainPost(Times = Data$time,
Event = Data$event,
parallel = T, NumCores = 2)
QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
# Get Estimated Quantiles with confidence bounds:
Quants = QuantAll(PosteriorDraws = PostDraws$surv,
Times = Data$time,
Event = Data$event,
Predictors = 1,
Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
ConfLevel = 0.95)
AnalyzeQuants(QuantMatrix = Quants, Quantiles = c(0.1, 0.25, 0.5, 0.75, 0.9),
shape = 0.8, scale = 2.5)
Data = SimulateData(n = 50, censoring.rate = 0.5)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
set.seed(807)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
Simulation(OneSample = T, n = 50, CensoringRate = 0.2, Parallel = T)
